CREATE TABLE roles (
    role_id INT PRIMARY KEY AUTO_INCREMENT,
    role_name VARCHAR(100) NOT NULL
);

CREATE TABLE users (
    user_id INT PRIMARY KEY AUTO_INCREMENT,
    email VARCHAR(100) NOT NULL UNIQUE,
    password_hash TEXT,
    full_name VARCHAR(100) NOT NULL,
    phone VARCHAR(20),
    facebook_id VARCHAR(255),
    google_id VARCHAR(255),
    provider ENUM('local','google','facebook') DEFAULT 'local',
    is_active BOOLEAN DEFAULT TRUE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    last_login DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

SELECT * from users u ;


CREATE TABLE user_roles (
    user_id INT NOT NULL,
    role_id INT NOT NULL,
    PRIMARY KEY (user_id, role_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (role_id) REFERENCES roles(role_id)
);


CREATE TABLE categories (
    category_id INT PRIMARY KEY AUTO_INCREMENT,
    category_name VARCHAR(150) NOT NULL,
    slug VARCHAR(150) NOT NULL UNIQUE,
    parent_id INT NULL,
    sort_order INT DEFAULT 0,
    is_active BOOLEAN DEFAULT TRUE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    image_url VARCHAR(255),
    FOREIGN KEY (parent_id) REFERENCES categories(category_id) ON DELETE SET NULL
);


CREATE TABLE products (
    product_id INT PRIMARY KEY AUTO_INCREMENT,
    product_name VARCHAR(255) NOT NULL,
    description TEXT,
    price DECIMAL(12,2) NOT NULL,
    material VARCHAR(100),
    brand VARCHAR(100),
    category_id INT,
    slug VARCHAR(150) NOT NULL UNIQUE,
    is_active BOOLEAN DEFAULT TRUE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (category_id) REFERENCES categories(category_id) ON DELETE SET NULL
);

select * from products;

CREATE TABLE product_images (
    image_id INT PRIMARY KEY AUTO_INCREMENT,
    product_id INT NOT NULL,
    image_url VARCHAR(255) NOT NULL,
    is_primary BOOLEAN DEFAULT FALSE, -- ·∫£nh ch√≠nh hay kh√¥ng
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (product_id) REFERENCES products(product_id) ON DELETE CASCADE
);


CREATE TABLE product_variants (
    variant_id INT PRIMARY KEY AUTO_INCREMENT,
    product_id INT NOT NULL,
    color VARCHAR(50) NOT NULL,
    size VARCHAR(50) NOT NULL,
    price DECIMAL(12,2) NOT NULL,
    weight DECIMAL(12,2),
    is_active BOOLEAN DEFAULT TRUE,
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);


CREATE TABLE carts (
    cart_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);


CREATE TABLE cart_items (
    cart_item_id INT PRIMARY KEY AUTO_INCREMENT,
    cart_id INT NOT NULL,
    variant_id INT NOT NULL,
    quantity INT NOT NULL,
    price DECIMAL(12,2) NOT NULL,
    image_url VARCHAR(255),
    added_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (cart_id) REFERENCES carts(cart_id),
    FOREIGN KEY (variant_id) REFERENCES product_variants(variant_id)
);

CREATE TABLE locations (
    location_id INT PRIMARY KEY AUTO_INCREMENT,
    province VARCHAR(100),
    district VARCHAR(100),
    ward VARCHAR(100)
);

select * from locations l ;

CREATE TABLE orders (
    order_id INT NOT NULL PRIMARY KEY,
    user_id INT NOT NULL,
    location_id INT,
    code VARCHAR(50) NOT NULL UNIQUE,
    status ENUM('PENDING','CONFIRMED','SHIPPED','DELIVERED','CANCELLED') NOT NULL DEFAULT 'PENDING',
    subtotal DECIMAL(12,2) NOT NULL,
    shipping_fee DECIMAL(12,2) NOT NULL,
    total DECIMAL(12,2) NOT NULL,
    placed_at DATETIME NOT NULL,
    shipping_address VARCHAR(255) NOT NULL,
    full_name VARCHAR(100),  -- n·∫øu kh√°ch ch∆∞a ƒëƒÉng nh·∫≠p
    phone VARCHAR(20),
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (location_id) REFERENCES locations(location_id)
);

select * from orders o ;

CREATE TABLE order_items (
    order_item_id INT PRIMARY KEY AUTO_INCREMENT,
    order_id INT NOT NULL,
    variant_id INT NOT NULL,
    quantity INT NOT NULL,
    price DECIMAL(12,2) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (variant_id) REFERENCES product_variants(variant_id)
);
select * from order_items ;

CREATE TABLE shipments (
    id INT PRIMARY KEY AUTO_INCREMENT,
    order_id INT NOT NULL,
    carrier VARCHAR(100) NOT NULL,
    tracking_number VARCHAR(100),
    status ENUM('PREPARING','SHIPPED','DELIVERED','RETURNED') DEFAULT 'PREPARING',
    shipped_at DATETIME,
    delivered_at DATETIME,
    FOREIGN KEY (order_id) REFERENCES orders(order_id)
);

CREATE TABLE payments (
    id INT PRIMARY KEY AUTO_INCREMENT,
    order_id INT NOT NULL,
    method VARCHAR(50) NOT NULL,
    status ENUM('PENDING','PAID','FAILED','REFUNDED') DEFAULT 'PENDING',
    amount DECIMAL(12,2) NOT NULL,
    paid_at DATETIME,
    FOREIGN KEY (order_id) REFERENCES orders(order_id)
);

CREATE TABLE reviews (
    review_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
    product_id INT NOT NULL,
    rating TINYINT NOT NULL CHECK (rating BETWEEN 1 AND 5),
    comment TEXT,
    status ENUM('PENDING','APPROVED','HIDDEN') DEFAULT 'PENDING',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES products(product_id) ON DELETE CASCADE,
    INDEX idx_status (status) 
);
select * from reviews;

CREATE TABLE inventory (
    inventory_id INT PRIMARY KEY AUTO_INCREMENT,      -- ID b·∫£n ghi t·ªìn kho
    variant_id INT NOT NULL,                          -- Li√™n k·∫øt bi·∫øn th·ªÉ s·∫£n ph·∫©m
    quantity INT NOT NULL,                            -- S·ªë l∆∞·ª£ng hi·ªán t·∫°i trong kho
    safety_stock INT DEFAULT 0,                       -- M·ª©c c·∫£nh b√°o t·ªìn kho t·ªëi thi·ªÉu
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    -- Th·ªùi gian c·∫≠p nh·∫≠t cu·ªëi
    updated_by INT,                                   -- ID nh√¢n vi√™n c·∫≠p nh·∫≠t t·ªìn kho
    FOREIGN KEY (variant_id) REFERENCES product_variants(variant_id)
);


CREATE TABLE inventory_transactions (
    transaction_id INT PRIMARY KEY AUTO_INCREMENT,
    variant_id INT NOT NULL,
    transaction_type ENUM('IMPORT','EXPORT') NOT NULL,
    quantity INT NOT NULL CHECK (quantity > 0),
    unit_cost DECIMAL(15,2) DEFAULT 0.00,
    transaction_source ENUM('PURCHASE','SALE','RETURN','ADJUSTMENT') DEFAULT 'PURCHASE',
    reference_id  BIGINT,
    created_by INT,
    transaction_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    note VARCHAR(255),
    FOREIGN KEY (variant_id) REFERENCES product_variants(variant_id),
    FOREIGN KEY (created_by) REFERENCES users(user_id)
);


    SELECT 
                p.product_id AS productId,
                p.product_name AS productName,
                p.description AS description,
                p.material AS material,
                p.slug AS slug,
                p.price AS price,
                p.brand AS brand,
                pi.image_url AS imageUrl,
                p.category_id AS categoryId,
                c.category_name AS categoryName,
                COALESCE(SUM(oi.quantity), 0) AS totalSold,
                p.is_featured AS isFeatured
            FROM products p
            LEFT JOIN product_variants v ON v.product_id = p.product_id
            LEFT JOIN order_items oi ON oi.variant_id = v.variant_id
            LEFT JOIN orders o ON o.order_id = oi.order_id AND o.status = 'DELIVERED'
            LEFT JOIN (
                SELECT product_id, MIN(image_url) AS image_url
                FROM product_images
                WHERE is_primary = true
                GROUP BY product_id
            ) pi ON pi.product_id = p.product_id
            LEFT JOIN categories c ON c.category_id = p.category_id
            WHERE p.is_active = true 
              AND p.is_featured = true    -- üîπ ch·ªâ s·∫£n ph·∫©m n·ªïi b·∫≠t
            GROUP BY p.product_id, p.product_name, p.description, p.material, 
                     p.slug, p.price, p.brand, pi.image_url, p.category_id, 
                     c.category_name, p.is_featured
            ORDER BY totalSold DESC
            LIMIT 8;

-- =============================
-- 35 d√≤ng d·ªØ li·ªáu m·∫´u cho b·∫£ng categories (n·ªôi th·∫•t)
-- =============================

INSERT INTO categories (category_name, slug, parent_id, sort_order, is_active, image_url) VALUES
-- ===== DANH M·ª§C G·ªêC =====
('Ph√≤ng Kh√°ch',       'phong-khach',       NULL, 1, TRUE, 'images/categories/phong-khach.jpg'),
('Ph√≤ng Ng·ªß',         'phong-ngu',         NULL, 2, TRUE, 'images/categories/phong-ngu.jpg'),
('Ph√≤ng ƒÇn',          'phong-an',          NULL, 3, TRUE, 'images/categories/phong-an.jpg'),
('VƒÉn Ph√≤ng',         'van-phong',         NULL, 4, TRUE, 'images/categories/van-phong.jpg'),
('Trang Tr√≠',         'trang-tri',         NULL, 5, TRUE, 'images/categories/trang-tri.jpg'),
('Ngo√†i Tr·ªùi',        'ngoai-troi',        NULL, 6, TRUE, 'images/categories/ngoai-troi.jpg'),
('Nh√† T·∫Øm',           'nha-tam',           NULL, 7, TRUE, 'images/categories/nha-tam.jpg'),

-- ===== Ph√≤ng Kh√°ch =====
('Sofa & Gh·∫ø B√†nh',   'sofa-ghe-banh',     1, 1, TRUE, 'images/categories/sofa-ghe-banh.jpg'),
('B√†n Tr√†',           'ban-tra',           1, 2, TRUE, 'images/categories/ban-tra.jpg'),
('K·ªá Tivi',           'ke-tivi',           1, 3, TRUE, 'images/categories/ke-tivi.jpg'),
('T·ªß Trang Tr√≠',      'tu-trang-tri',      1, 4, TRUE, 'images/categories/tu-trang-tri.jpg'),
('Th·∫£m Trang Tr√≠',    'tham-trang-tri',    1, 5, TRUE, 'images/categories/tham-trang-tri.jpg'),

-- ===== Ph√≤ng Ng·ªß =====
('Gi∆∞·ªùng Ng·ªß',        'giuong-ngu',        2, 1, TRUE, 'images/categories/giuong-ngu.jpg'),
('T·ªß Qu·∫ßn √Åo',        'tu-quan-ao',        2, 2, TRUE, 'images/categories/tu-quan-ao.jpg'),
('B√†n Trang ƒêi·ªÉm',    'ban-trang-diem',    2, 3, TRUE, 'images/categories/ban-trang-diem.jpg'),
('T·ªß ƒê·∫ßu Gi∆∞·ªùng',     'tu-dau-giuong',     2, 4, TRUE, 'images/categories/tu-dau-giuong.jpg'),
('ƒê√®n Ng·ªß',           'den-ngu',           2, 5, TRUE, 'images/categories/den-ngu.jpg'),

-- ===== Ph√≤ng ƒÇn =====
('B√†n ƒÇn',            'ban-an',            3, 1, TRUE, 'images/categories/ban-an.jpg'),
('Gh·∫ø ƒÇn',            'ghe-an',            3, 2, TRUE, 'images/categories/ghe-an.jpg'),
('T·ªß B√°t',            'tu-bat',            3, 3, TRUE, 'images/categories/tu-bat.jpg'),
('K·ªá R∆∞·ª£u',           'ke-ruou',           3, 4, TRUE, 'images/categories/ke-ruou.jpg'),

-- ===== VƒÉn Ph√≤ng =====
('B√†n L√†m Vi·ªác',      'ban-lam-viec',      4, 1, TRUE, 'images/categories/ban-lam-viec.jpg'),
('Gh·∫ø VƒÉn Ph√≤ng',     'ghe-van-phong',     4, 2, TRUE, 'images/categories/ghe-van-phong.jpg'),
('T·ªß H·ªì S∆°',          'tu-ho-so',          4, 3, TRUE, 'images/categories/tu-ho-so.jpg'),
('K·ªá S√°ch',           'ke-sach',           4, 4, TRUE, 'images/categories/ke-sach.jpg'),

-- ===== Trang Tr√≠ =====
('Tranh Treo T∆∞·ªùng',  'tranh-treo-tuong',  5, 1, TRUE, 'images/categories/tranh-treo-tuong.jpg'),
('ƒê√®n Trang Tr√≠',     'den-trang-tri',     5, 2, TRUE, 'images/categories/den-trang-tri.jpg'),
('B√¨nh Hoa',          'binh-hoa',          5, 3, TRUE, 'images/categories/binh-hoa.jpg'),
('ƒê·ªìng H·ªì Treo T∆∞·ªùng','dong-ho-treo-tuong',5, 4, TRUE, 'images/categories/dong-ho-treo-tuong.jpg'),

-- ===== Ngo√†i Tr·ªùi =====
('B√†n Gh·∫ø S√¢n V∆∞·ªùn',  'ban-ghe-san-vuon',  6, 1, TRUE, 'images/categories/ban-ghe-san-vuon.jpg'),
('√î Che N·∫Øng',        'o-che-nang',        6, 2, TRUE, 'images/categories/o-che-nang.jpg'),
('X√≠ch ƒêu Ngo√†i Tr·ªùi','xich-du-ngoai-troi',6, 3, TRUE, 'images/categories/xich-du-ngoai-troi.jpg'),

-- ===== Nh√† T·∫Øm =====
('T·ªß Lavabo',         'tu-lavabo',         7, 1, TRUE, 'images/categories/tu-lavabo.jpg'),
('G∆∞∆°ng Trang Tr√≠',   'guong-trang-tri',   7, 2, TRUE, 'images/categories/guong-trang-tri.jpg'),
('K·ªá ƒê·ªÉ ƒê·ªì',          'ke-de-do',          7, 3, TRUE, 'images/categories/ke-de-do.jpg');




-- =============================
-- 30 D√íNG D·ªÆ LI·ªÜU M·∫™U CHO B·∫¢NG PRODUCTS (N·ªòI TH·∫§T)
-- =============================

INSERT INTO products (product_name, description, price, material, brand, category_id, slug, is_active) VALUES
-- ====== PH√íNG KH√ÅCH ======
('Sofa G√≥c V·∫£i Nhung Hi·ªán ƒê·∫°i', 'Sofa g√≥c ch·ªØ L b·ªçc v·∫£i nhung cao c·∫•p, ph√π h·ª£p ph√≤ng kh√°ch r·ªông.', 12900000, 'V·∫£i nhung', 'FurniHome', 8, 'sofa-vai-nhung-hien-dai', TRUE),
('B√†n Tr√† G·ªó S·ªìi T·ª± Nhi√™n', 'B√†n tr√† tr√≤n g·ªó s·ªìi ph·ªß s∆°n m·ªù, phong c√°ch B·∫Øc √Çu tinh t·∫ø.', 3500000, 'G·ªó s·ªìi', 'WoodArt', 9, 'ban-tra-go-soi-tu-nhien', TRUE),
('K·ªá Tivi G·ªó C√¥ng Nghi·ªáp', 'K·ªá tivi d√†i 1m8, thi·∫øt k·∫ø hi·ªán ƒë·∫°i, c√≥ 3 ngƒÉn k√©o ti·ªán l·ª£i.', 4200000, 'G·ªó MDF ph·ªß Melamine', 'DecoHouse', 10, 'ke-tivi-go-cong-nghiep', TRUE),
('T·ªß Trang Tr√≠ 3 T·∫ßng', 'T·ªß trang tr√≠ ƒëa nƒÉng, m√†u tr·∫Øng, d·ªÖ k·∫øt h·ª£p n·ªôi th·∫•t kh√°c.', 2900000, 'G·ªó c√¥ng nghi·ªáp', 'UrbanDecor', 11, 'tu-trang-tri-3-tang', TRUE),
('Th·∫£m Trang Tr√≠ L√¥ng Ng·∫Øn', 'Th·∫£m tr·∫£i s√†n cao c·∫•p, ch·ªëng tr∆∞·ª£t, d·ªÖ v·ªá sinh.', 950000, 'S·ª£i polyester', 'SoftHome', 12, 'tham-trang-tri-long-ngan', TRUE),

-- ====== PH√íNG NG·ª¶ ======
('Gi∆∞·ªùng Ng·ªß G·ªó T·ª± Nhi√™n Queen Size', 'Gi∆∞·ªùng ng·ªß g·ªó cao su t·ª± nhi√™n, thi·∫øt k·∫ø ch·∫Øc ch·∫Øn v√† sang tr·ªçng.', 6800000, 'G·ªó cao su', 'DreamWood', 13, 'giuong-ngu-go-tu-nhien-queen', TRUE),
('T·ªß Qu·∫ßn √Åo C·ª≠a L√πa 2m', 'T·ªß √°o c·ª≠a l√πa hi·ªán ƒë·∫°i, ti·∫øt ki·ªám kh√¥ng gian, 3 ngƒÉn r·ªông r√£i.', 8900000, 'G·ªó MDF', 'UrbanDecor', 14, 'tu-quan-ao-cua-lua-2m', TRUE),
('B√†n Trang ƒêi·ªÉm C√≥ G∆∞∆°ng ƒê√®n LED', 'B√†n trang ƒëi·ªÉm c√≥ g∆∞∆°ng c·∫£m ·ª©ng v√† ngƒÉn k√©o ti·ªán d·ª•ng.', 4900000, 'G·ªó c√¥ng nghi·ªáp', 'BeautyDesk', 15, 'ban-trang-diem-guong-led', TRUE),
('T·ªß ƒê·∫ßu Gi∆∞·ªùng 2 NgƒÉn K√©o', 'T·ªß nh·ªè ƒë·∫ßu gi∆∞·ªùng, m√†u n√¢u g·ªó, 2 ngƒÉn ti·ªán l·ª£i.', 1450000, 'G·ªó c√¥ng nghi·ªáp', 'CozyHome', 16, 'tu-dau-giuong-2-ngan', TRUE),
('ƒê√®n Ng·ªß ƒê·ªÉ B√†n Ki·ªÉu Nh·∫≠t', 'ƒê√®n ng·ªß phong c√°ch Nh·∫≠t B·∫£n, √°nh s√°ng ·∫•m d·ªãu, ti·∫øt ki·ªám ƒëi·ªán.', 650000, 'G·ªó tre', 'LightCraft', 17, 'den-ngu-kieu-nhat', TRUE),

-- ====== PH√íNG ƒÇN ======
('B·ªô B√†n ƒÇn 6 Gh·∫ø G·ªó S·ªìi', 'B·ªô b√†n ƒÉn g·ªìm b√†n ch·ªØ nh·∫≠t v√† 6 gh·∫ø b·ªçc n·ªám.', 11900000, 'G·ªó s·ªìi', 'FurniHome', 18, 'bo-ban-an-6-ghe-go-soi', TRUE),
('Gh·∫ø ƒÇn L∆∞ng Cong ƒê·ªám Da', 'Gh·∫ø ƒÉn ki·ªÉu d√°ng hi·ªán ƒë·∫°i, ƒë·ªám da PU √™m √°i.', 1200000, 'G·ªó cao su, da PU', 'DecoHouse', 19, 'ghe-an-lung-cong-dem-da', TRUE),
('T·ªß B√°t 3 C√°nh G·ªó S·ªìi', 'T·ªß ƒë·ª±ng b√°t ƒëƒ©a g·ªó s·ªìi t·ª± nhi√™n, m√†u s√°ng sang tr·ªçng.', 5200000, 'G·ªó s·ªìi', 'WoodArt', 20, 'tu-bat-3-canh-go-soi', TRUE),
('K·ªá R∆∞·ª£u Mini Ki·ªÉu √Çu', 'K·ªá tr∆∞ng b√†y r∆∞·ª£u nh·ªè g·ªçn, phong c√°ch ch√¢u √Çu c·ªï ƒëi·ªÉn.', 2700000, 'G·ªó c√¥ng nghi·ªáp', 'UrbanDecor', 21, 'ke-ruou-mini-kieu-au', TRUE),

-- ====== VƒÇN PH√íNG ======
('B√†n L√†m Vi·ªác G·ªó 1m2', 'B√†n l√†m vi·ªác nh·ªè g·ªçn, ph√π h·ª£p kh√¥ng gian gia ƒë√¨nh.', 2200000, 'G·ªó MDF ph·ªß Melamine', 'OfficePlus', 22, 'ban-lam-viec-go-1m2', TRUE),
('Gh·∫ø VƒÉn Ph√≤ng Ergonomic', 'Gh·∫ø xoay c√¥ng th√°i h·ªçc, h·ªó tr·ª£ c·ªôt s·ªëng, ch·∫•t li·ªáu l∆∞·ªõi tho√°ng.', 3400000, 'L∆∞·ªõi + khung th√©p', 'ErgoChair', 23, 'ghe-van-phong-ergonomic', TRUE),
('T·ªß H·ªì S∆° 2 C√°nh L·ªõn', 'T·ªß h·ªì s∆° vƒÉn ph√≤ng 2 c√°nh, kh√≥a an to√†n, nhi·ªÅu ngƒÉn ch·ª©a.', 3100000, 'Th√©p s∆°n tƒ©nh ƒëi·ªán', 'OfficeMate', 24, 'tu-ho-so-2-canh-lon', TRUE),
('K·ªá S√°ch ƒê·ª©ng 5 T·∫ßng', 'K·ªá s√°ch ƒë·ª©ng b·∫±ng g·ªó c√¥ng nghi·ªáp, ti·∫øt ki·ªám kh√¥ng gian.', 1850000, 'G·ªó MDF', 'BookNest', 25, 'ke-sach-dung-5-tang', TRUE),

-- ====== TRANG TR√ç ======
('Tranh Canvas Tr·ª´u T∆∞·ª£ng', 'Tranh treo t∆∞·ªùng canvas khung g·ªó, in UV ch·ªëng phai m√†u.', 890000, 'V·∫£i canvas', 'ArtHouse', 26, 'tranh-canvas-truu-tuong', TRUE),
('ƒê√®n Th·∫£ Tr·∫ßn Ngh·ªá Thu·∫≠t', 'ƒê√®n th·∫£ tr·∫ßn b·∫±ng kim lo·∫°i, √°nh s√°ng v√†ng ·∫•m √°p.', 2150000, 'Th√©p s∆°n tƒ©nh ƒëi·ªán', 'LightCraft', 27, 'den-tha-tran-nghe-thuat', TRUE),
('B√¨nh Hoa G·ªëm Trang Tr√≠', 'B√¨nh hoa g·ªëm s·ª© tr·∫Øng, ki·ªÉu d√°ng thanh l·ªãch, cao 25cm.', 420000, 'G·ªëm s·ª©', 'DecorLine', 28, 'binh-hoa-gom-trang-tri', TRUE),
('ƒê·ªìng H·ªì Treo T∆∞·ªùng Vintage', 'ƒê·ªìng h·ªì treo t∆∞·ªùng kim tr√¥i, phong c√°ch c·ªï ƒëi·ªÉn.', 980000, 'Kim lo·∫°i + g·ªó', 'TimeArt', 29, 'dong-ho-treo-tuong-vintage', TRUE),

-- ====== NGO√ÄI TR·ªúI ======
('B·ªô B√†n Gh·∫ø S√¢n V∆∞·ªùn Nh√¥m ƒê√∫c', 'B√†n gh·∫ø s√¢n v∆∞·ªùn nh√¥m ƒë√∫c s∆°n tƒ©nh ƒëi·ªán ch·ªëng g·ªâ.', 12500000, 'Nh√¥m ƒë√∫c', 'OutdoorPro', 30, 'bo-ban-ghe-san-vuon-nhom-duc', TRUE),
('√î Che N·∫Øng Tr√≤n 3m', '√î che n·∫Øng ch·ªëng tia UV, d·ªÖ g·∫≠p g·ªçn.', 1950000, 'V·∫£i d√π + nh√¥m', 'SunnyShade', 31, 'o-che-nang-tron-3m', TRUE),
('X√≠ch ƒêu S√¢n V∆∞·ªùn 2 Ch·ªó', 'X√≠ch ƒëu ngo√†i tr·ªùi khung s·∫Øt s∆°n tƒ©nh ƒëi·ªán, m√°i che.', 5600000, 'S·∫Øt + v·∫£i', 'RelaxGarden', 32, 'xich-du-san-vuon-2-cho', TRUE),

-- ====== NH√Ä T·∫ÆM ======
('T·ªß Lavabo Treo T∆∞·ªùng', 'T·ªß lavabo g·ªó ch·ªëng ·∫©m, b·ªÅ m·∫∑t ph·ªß Melamine ch·ªëng tr·∫ßy.', 4200000, 'G·ªó MDF ch·ªëng ·∫©m', 'BathLine', 33, 'tu-lavabo-treo-tuong', TRUE),
('G∆∞∆°ng Tr√≤n Trang Tr√≠ Vi·ªÅn G·ªó', 'G∆∞∆°ng tr√≤n treo t∆∞·ªùng vi·ªÅn g·ªó t·ª± nhi√™n, d·ªÖ ph·ªëi h·ª£p.', 890000, 'G·ªó cao su + g∆∞∆°ng', 'MirrorArt', 34, 'guong-tron-vien-go', TRUE),
('K·ªá ƒê·ªÉ ƒê·ªì 3 T·∫ßng Nh√† T·∫Øm', 'K·ªá inox 3 t·∫ßng ch·ªëng g·ªâ, ti·ªán d·ª•ng cho nh√† t·∫Øm nh·ªè.', 690000, 'Inox 304', 'BathLine', 35, 'ke-de-do-3-tang', TRUE);


INSERT INTO locations (province, district, ward) VALUES
-- H√† N·ªôi & Mi·ªÅn B·∫Øc
('H√† N·ªôi', 'Ba ƒê√¨nh', 'Ph√∫c X√°'),
('H√† N·ªôi', 'C·∫ßu Gi·∫•y', 'D·ªãch V·ªçng H·∫≠u'),
('H√† N·ªôi', 'Ho√†ng Mai', 'T√¢n Mai'),
('H√† N·ªôi', 'ƒê·ªëng ƒêa', 'Nam ƒê·ªìng'),
('H√† N·ªôi', 'T√¢y H·ªì', 'Qu·∫£ng An'),
('H√† N·ªôi', 'Thanh Xu√¢n', 'H·∫° ƒê√¨nh'),
('B·∫Øc Ninh', 'T·ª´ S∆°n', 'ƒê√¥ng Ng√†n'),
('B·∫Øc Giang', 'Y√™n D≈©ng', 'T√¢n Li·ªÖu'),
('Th√°i Nguy√™n', 'Ph·ªï Y√™n', 'Ba H√†ng'),
('Vƒ©nh Ph√∫c', 'Vƒ©nh Y√™n', 'ƒê·ªãnh Trung'),
('Ph√∫ Th·ªç', 'Vi·ªát Tr√¨', 'Ti√™n C√°t'),
('H·∫£i D∆∞∆°ng', 'Ch√≠ Linh', 'Sao ƒê·ªè'),
('H·∫£i Ph√≤ng', 'L√™ Ch√¢n', 'Tr·∫°i Cau'),
('Qu·∫£ng Ninh', 'H·∫° Long', 'B√£i Ch√°y'),
('Nam ƒê·ªãnh', 'Nam Tr·ª±c', 'Nam Giang'),
('Ninh B√¨nh', 'Tam ƒêi·ªáp', 'T√¢n B√¨nh'),
('H√≤a B√¨nh', 'TP H√≤a B√¨nh', 'Ph∆∞∆°ng L√¢m'),

-- Mi·ªÅn Trung
('Thanh H√≥a', 'TP Thanh H√≥a', 'ƒê√¥ng Th·ªç'),
('Ngh·ªá An', 'Vinh', 'H∆∞ng Ph√∫c'),
('H√† Tƒ©nh', 'H·ªìng Lƒ©nh', 'ƒê·∫≠u Li√™u'),
('Qu·∫£ng B√¨nh', 'ƒê·ªìng H·ªõi', 'H·∫£i ƒê√¨nh'),
('Qu·∫£ng Tr·ªã', 'ƒê√¥ng H√†', 'Ph∆∞·ªùng 1'),
('Th·ª´a Thi√™n Hu·∫ø', 'Hu·∫ø', 'Ph∆∞·ªõc Vƒ©nh'),
('ƒê√† N·∫µng', 'H·∫£i Ch√¢u', 'Th·∫°ch Thang'),
('ƒê√† N·∫µng', 'S∆°n Tr√†', 'An H·∫£i B·∫Øc'),
('Qu·∫£ng Nam', 'Tam K·ª≥', 'T√¢n Th·∫°nh'),
('Qu·∫£ng Ng√£i', 'TP Qu·∫£ng Ng√£i', 'Nghƒ©a Ch√°nh'),
('B√¨nh ƒê·ªãnh', 'Quy Nh∆°n', 'Ng√¥ M√¢y'),
('Ph√∫ Y√™n', 'Tuy H√≤a', 'Ph∆∞·ªùng 7'),
('Kh√°nh H√≤a', 'Nha Trang', 'Vƒ©nh Ph∆∞·ªõc'),
('Ninh Thu·∫≠n', 'Phan Rang ‚Äì Th√°p Ch√†m', 'Ph·ªß H√†'),
('B√¨nh Thu·∫≠n', 'Phan Thi·∫øt', 'Ph√∫ Trinh'),

-- T√¢y Nguy√™n
('Kon Tum', 'TP Kon Tum', 'Duy T√¢n'),
('Gia Lai', 'Pleiku', 'Di√™n H·ªìng'),
('ƒê·∫Øk L·∫Øk', 'Bu√¥n Ma Thu·ªôt', 'T√¢n L·ª£i'),
('ƒê·∫Øk N√¥ng', 'Gia Nghƒ©a', 'Nghƒ©a Trung'),
('L√¢m ƒê·ªìng', 'ƒê√† L·∫°t', 'Ph∆∞·ªùng 4'),

-- Mi·ªÅn Nam
('H·ªì Ch√≠ Minh', 'Qu·∫≠n 1', 'B·∫øn Ngh√©'),
('H·ªì Ch√≠ Minh', 'Qu·∫≠n 3', 'Ph∆∞·ªùng 6'),
('H·ªì Ch√≠ Minh', 'B√¨nh Th·∫°nh', 'Ph∆∞·ªùng 25'),
('H·ªì Ch√≠ Minh', 'Th·ªß ƒê·ª©c', 'Hi·ªáp B√¨nh Ch√°nh'),
('B√¨nh D∆∞∆°ng', 'Th·ªß D·∫ßu M·ªôt', 'Hi·ªáp Th√†nh'),
('ƒê·ªìng Nai', 'Bi√™n H√≤a', 'T√¢n Phong'),
('B√† R·ªãa - V≈©ng T√†u', 'V≈©ng T√†u', 'Th·∫Øng Nh·∫•t'),
('Long An', 'T√¢n An', 'Ph∆∞·ªùng 2'),
('Ti·ªÅn Giang', 'M·ªπ Tho', 'Ph∆∞·ªùng 5'),
('B·∫øn Tre', 'TP B·∫øn Tre', 'Ph√∫ Kh∆∞∆°ng'),
('Vƒ©nh Long', 'TP Vƒ©nh Long', 'Ph∆∞·ªùng 9'),
('C·∫ßn Th∆°', 'Ninh Ki·ªÅu', 'An Kh√°nh'),
('An Giang', 'Long Xuy√™n', 'M·ªπ B√¨nh'),
('Ki√™n Giang', 'R·∫°ch Gi√°', 'Vƒ©nh Thanh'),
('C√† Mau', 'TP C√† Mau', 'Ph∆∞·ªùng 7');
