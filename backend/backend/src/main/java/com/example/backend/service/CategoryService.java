package com.example.backend.service;

import com.example.backend.dto.requset.CategoryRequest;
import com.example.backend.dto.response.CategoryResponse;
import com.example.backend.entity.Category;
import com.example.backend.mapper.CategoryMapper;
import com.example.backend.repository.CategoryRepository;
import jakarta.transaction.Transactional;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import java.text.Normalizer;
import java.util.List;
import java.util.Locale;

@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@Service
public class CategoryService {
    CategoryRepository categoryRepository;

    CategoryMapper categoryMapper;

    // l·∫•y t·∫•t c·∫£ danh m·ª•c
    public List<CategoryResponse> getAllCategories() {
        List<Category> categories = categoryRepository.findAll(Sort.by(Sort.Direction.ASC, "sortOrder"));
        return categories.stream().map(categoryMapper::toCategoryResponseWithChildren).toList();

    }
    // üîπ Sinh slug t·ª´ t√™n
     String generateSlug(String name) {
        // Chuy·ªÉn ti·∫øng Vi·ªát c√≥ d·∫•u th√†nh kh√¥ng d·∫•u
        String normalized = Normalizer.normalize(name, Normalizer.Form.NFD);
        String slug = normalized.replaceAll("\\p{M}", "") // lo·∫°i b·ªè d·∫•u
                .replaceAll("([a-z])([A-Z])", "$1-$2") // ch√®n '-' tr∆∞·ªõc ch·ªØ hoa
                .toLowerCase()
                .replaceAll("[^a-z0-9\\s-]", "") // lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát
                .replaceAll("\\s+", "-"); // thay kho·∫£ng tr·∫Øng b·∫±ng '-'
        return slug;
    }
    //T·∫°o danh m·ª•c
    @Transactional
    public Category createCategory(CategoryRequest request) {
        if (categoryRepository.existsByCategoryName(request.getCategoryName())) {
            throw new RuntimeException("T√™n danh m·ª•c ƒë√£ t·ªìn t·∫°i!");
        }

        String slug = generateSlug(request.getCategoryName());
        if (categoryRepository.existsBySlug(slug)) {
            throw new RuntimeException("T√™n slug ƒë√£ t·ªìn t·∫°i!");
        }

        Category category = categoryMapper.toCategory(request);
        category.setSlug(slug);
        Integer maxSortOrder = categoryRepository.findMaxSortOrder();
        category.setSortOrder((maxSortOrder != null ? maxSortOrder : 0) + 1);

        // G√°n cha n·∫øu c√≥
        if (request.getParentId() != null) {
            Category parent = categoryRepository.findById(request.getParentId())
                    .orElseThrow(() -> new RuntimeException("Danh m·ª•c cha kh√¥ng t·ªìn t·∫°i"));
            category.setParent(parent); // n·∫øu ManyToOne
        }

        return categoryRepository.save(category);
    }

    // h√†m c·∫≠p nh·∫≠p danh m·ª•c
    @Transactional
    public Category updateCategory(Long id, CategoryRequest request) {
        // L·∫•y category hi·ªán t·∫°i
        Category category = categoryRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Danh m·ª•c kh√¥ng t·ªìn t·∫°i"));

        // Ki·ªÉm tra t√™n m·ªõi c√≥ tr√πng v·ªõi category kh√°c kh√¥ng
        if (!category.getCategoryName().equals(request.getCategoryName()) &&
                categoryRepository.existsByCategoryName(request.getCategoryName())) {
            throw new RuntimeException("T√™n danh m·ª•c ƒë√£ t·ªìn t·∫°i!");
        }

        // Sinh slug m·ªõi t·ª´ t√™n m·ªõi
        String slug = generateSlug(request.getCategoryName());
        if (!category.getSlug().equals(slug) &&
                categoryRepository.existsBySlug(slug)) {
            throw new RuntimeException("Slug ƒë√£ t·ªìn t·∫°i!");
        }

        // C·∫≠p nh·∫≠t th√¥ng tin
        category.setCategoryName(request.getCategoryName());
        category.setSlug(slug);
        category.setSortOrder(request.getSortOrder());

        // C·∫≠p nh·∫≠t cha n·∫øu c√≥
        if (request.getParentId() != null) {
            Category parent = categoryRepository.findById(request.getParentId())
                    .orElseThrow(() -> new RuntimeException("Danh m·ª•c cha kh√¥ng t·ªìn t·∫°i"));
            category.setParent(parent);
        } else {
            category.setParent(null);
        }

        return categoryRepository.save(category);
    }

    // ·∫®n / hi·ªán danh m·ª•c
    @Transactional
    public void setCategoryActiveStatus(Long id, Boolean isActive) {
        Category category = categoryRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Danh m·ª•c kh√¥ng t·ªìn t·∫°i"));

        if (!category.getChildren().isEmpty() && !isActive) {
            throw new RuntimeException("Danh m·ª•c c√≥ danh m·ª•c con, kh√¥ng th·ªÉ ·∫©n");
        }

        category.setIsActive(isActive);
    }


}
